install.packages("devtools")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("rnn")
library(rnn)
trainr
?trainr
X1 = sample(0:127, 7000, replace=TRUE)
X2 = sample(0:127, 7000, replace=TRUE)
Y <- X1 + X2
X1 <- int2bin(X1, length=8)
X2 <- int2bin(X2, length=8)
Y  <- int2bin(Y,  length=8)
X <- array( c(X1,X2), dim=c(dim(X1),2) )
model <- trainr(Y=Y,
X=X,
learningrate   =  0.1,
hidden_dim     = 10,
start_from_end = TRUE )
plot(colMeans(model$error),type='l',
xlab='epoch',
ylab='errors'                  )
A1 = int2bin( sample(0:127, 7000, replace=TRUE) )
A2 = int2bin( sample(0:127, 7000, replace=TRUE) )
A <- array( c(A1,A2), dim=c(dim(A1),2) )
B  <- predictr(model,
A     )
A1 <- bin2int(A1)
A2 <- bin2int(A2)
B  <- bin2int(B)
hist( B-(A1+A2) )
detach("package:rnn", unload=TRUE)
install.packages("RSNNS")
install.packages("hydroGOF")
?mlp
??mlp
??mlp
View(iris)
View(outputs)
View(predictions)
View(inputs)
errror
error
patset
snnsObject
res
patset
View(iris)
View(iris)
class(iris)
View(outputs)
class(output)
class(outputs)
class(inputs)
View(predictions)
View(outputs)
View(outputs)
View(predictions)
View(inputs)
install.packages("sigmoid")
library("sigmoid", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
a <- seq(-10,10)
( b <- sigmoid(a) )
plot(b)
hist( a - sigmoid(b, inverse=TRUE) )
( c <- sigmoid(a, SoftMax=TRUE) )
plot(c)
args(sigmoid)
?sigmoid
??sigmoid
x = seq(1,5, by=0.05)
qplot(sigmoid(x))
x = seq(1,5, by=0.05)
plot(sigmoid(x))
plot(sigmoid(c))
x <- seq(-5, 5, 0.01)
plot(x, sigmoid(x), col='blue')
plot(x,name, col='blue')
plot(x, sigmoid(x), col='red')
summary(model)
library("nnet")
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 1
)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
library(NeuralNetTools)
data(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ X4, data = neuraldat, size = 10)
nerualdat
neuraldat
head(neuraldat)
library(nnet)
mod <- nnet(Y1 ~ X1 + X2 + X3+ Y1, Y2, data = neuraldat, size = 10)
par(mar = numeric(4))
plotnet(mod)
plotnet(mod)
?neuralnet
??neuralnet
?rnn
??rnn
?lapply
?slip
?split
args(lapply)
str(split)
x <- c(rnorm(10), runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,gl)
split(x,f)
f
?gl
a <-gl(5,1)
a
a <-gl(5,5)
a
gl(10,5)
a <- gl(2,2,20)
a
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")] na.rm = TRUE))
sapply(s, function(x) colMeans (x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?interaction
swirl()
swirl::play()
library(swirl)
swirl()
1
swirl()
main
quit
quit
main()
quit()
library("swirl")
swirl()
main()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6,4))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply((unique_vals, function(elem) elem[2])
lapply((unique_vals,function(elem) elem[2])
lapply((unique_vals, function(elem) elem[2])
unique_vals
lapply(unique_vals, function(elem) elem[2])
main()
main()
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags,class)
sapply(flags,class, character(1))
ok()
vapply(flags,class, character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass , mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
a <- iris$Sepal.Length
mean(a)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?abs
str(abs)
a <- with(mtcars, tapply(mpg, cyl, mean))
dim(a)
class(a)
a[0,1]
a[1,1]
a[,1]
a[2,]
a[2]
a[2][1]
a[2][2]
a[2][2]
a[3]
abs(15.1)
lapply(a,abs)
sapply(a,abs)
b <- sapply(a,abs)
b
dim(b)
class(b)
b <- lapply(a,abs)
class(b)
b[1]
b$`8` - b$`4`
b$`4` - b$`8`
debug(ls)
ls
debug(ls)
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?xml
??xml
install.packages("XLConnect")
install.packages(c("xlsx", "XLConnect"))
install.packages("xlsx")
R CMD javareconf -e
library(swirl)
install_from_swirl("Exploratory Data Analysis")
?par
?cut
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
Month = factor(Month))
Month = factor(Month))
Month = factor(Month))
Month = factor(Month))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppl")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone , col ="blue" ))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May", "Other Months"))
with(subset(airquality, Month != 5), points(Wind, Ozone , col ="red" ))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") # add title
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone , col ="blue" ))
with(subset(airquality, Month != 5), points(Wind, Ozone , col ="red" ))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May", "Other Months"))
legend("topright", pch = 2, col = c("blue","red"), legend = c("May", "Other Months"))
legend("topright", pch = 3, col = c("blue","red"), legend = c("May", "Other Months"))
legend("topright", pch = 4, col = c("blue","red"), legend = c("May", "Other Months"))
legend("topright", pch = 5, col = c("blue","red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
?lm
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
})
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar.R")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c( 0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar.R")
plot(Temp, Ozone, main = "Ozone and Temp")
mtext("Ozone and Weather in New York", outer = T)
})
load("~/Desktop/Link to Data/FYP Program/.RData")
load("~/Desktop/Link to Data/FYP Program/main.R")
load("~/Desktop/Link to Data/FYP Program/.RData")
save.image("~/Desktop/Link to FYP/Data/FYP Program/try.RData")
load("~/Desktop/Link to Data/FYP Program/t.RData")
load("~/Desktop/Link to Data/FYP Program/.RData")
Result_USD_HOMO_LIST <- list()
count <- 1
### Changes in Neurons and Learning Functins and Learning Rate
for (i in 1:length(predictor_order)) {
result_HOMO_usd_PO3 <- data.frame("Predictor_Order"=numeric(),"Neurons"=numeric(),"RMSE"=numeric(),
"MAE"=numeric(),"Learning_Function"=character(),"Learning_Rate"=numeric(),
stringsAsFactors=FALSE)
usd_non_normalize_PO3 <- data.frame()
test_date_PO3 <- data.frame()
actual_usd_PO3 <- data.frame()
result_usd_PO3 <- list()
train_dataset[[i]] <- data_set[[1]][[i]][[1]]
test_dataset[[i]] <- data_set[[1]][[i]][[2]]
test_date[[i]] <- data_set[[1]][[i]][[3]]
usd_non_normalize[[i]]<- data_set[[1]][[i]][[4]]
actual_usd[[i]] <- test_dataset[[i]][,i+3]
if(predictor_order[i]==3){ neurons<-seq(2,20,1)}
if(predictor_order[i]==4){ neurons<-seq(3,20,1)}
if(predictor_order[i]==5){ neurons<-seq(3,20,1)}
if(predictor_order[i]==6){ neurons<-seq(4,20,1)}
if(predictor_order[i]==7){ neurons<-seq(4,20,1)}
if(predictor_order[i]==8){ neurons<-seq(5,20,1)}
if(predictor_order[i]==9){ neurons<-seq(5,20,1)}
if(predictor_order[i]==10){ neurons<-seq(6,20,1)}
for (l in 1:length(learning_rate) ){
for (k in 1:length(learning_func)) {
for (j in 1:length(neurons)) {
train_dataset_PO3 <- train_dataset[[i]]
test_dataset_PO3 <- test_dataset[[i]]
test_date_PO3 <- test_date[[i]]
usd_non_normalize_PO3 <-   usd_non_normalize[[i]]
actual_usd_PO3 <-  actual_usd[[i]]
result_usd_PO3[[j]] <-  HOMO(train_dataset_PO3,test_dataset_PO3, usd_non_normalize_PO3,
neurons = neurons[j], predictor_order[i], learning_func[k],learning_rate[l])
result_HOMO_usd_PO3[j,] <-c(predictor_order[i],neurons[j],
result_usd_PO3[[j]][4],result_usd_PO3[[j]][5],
learning_func[k],learning_rate[l])
Result_USD_HOMO_LIST[[count]] <- list(predictor_order[i],neurons[j],learning_rate[l],
learning_func[k], result_usd_PO3[[j]])
count <- count +1
}
# Writing to xlsx file
#write <- paste0("result_HOMO_usd_PO_",i,"_LF_",learning_func[k],"_LR_",learning_rate[l],".xlsx")
#write.xlsx(result_HOMO_usd_PO3, write)
}
}
}
save.image("~/Desktop/Testing/.RData")
load("~/Desktop/Link to Data/FYP Program/.RData")
set.wd(""~/Desktop/Link to Data/FYP Program")
setwd("/home/wut/Desktop/Testing")
shiny::runApp('myApp')
runApp('myApp')
runApp('myApp')
?builder
h3("Slidbar Text")
h1("Slidbar Text"),
h2("Slidbar Text"),
h3("Slidbar Text"),
em("Emphisized Text")
runApp('myApp')
runApp('myApp')
runApp('myApp')
runApp('myApp')
runApp('myApp')
2956*0.7
2956*0.8
runApp('myApp')
runApp('myApp')
?runif
